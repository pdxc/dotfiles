## Command to list all installed packages
#  (zcat $(ls -tr /var/log/apt/history.log*.gz); cat /var/log/apt/history.log) 2>/dev/null |
#  egrep '^(Start-Date:|Commandline:)' |
#  grep -v aptdaemon |
#  egrep '^Commandline:'

# Installed packages:

# chromium
apt install -y chromium-browser
# /chromium

# basic dev environment
apt install -y zsh
apt install -y tmux
apt-get install -y curl
apt-get install -y git
apt-get install -y fonts-powerline
# /basic dev environment

# Compile vim to add features (done to fix issues with vim easymotion plugin) and to satisfy vim >= 8.1 for coc.nvim
# Must also add /usr/local/bin/vim to path in .zshrc
# Check that vim points to /usr/local/bin/vim using `which vim` command
cd ~
# Clones into ~/vim (would it be better to put this somewhere else?)
git clone https://github.com/vim/vim.git
cd vim
# I don't currently need additional feature besides +conceal (use `vim --version` to check options)
# Would be better to find a way to only compile with that one additional feature
apt-get install ncurses-dev
./configure --with-features=huge --enable-pythoninterp --enable-python3interp
make
# Requires sudo
make install

# Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

# zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

# Install vim-plug
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# add undo dir for persistent vim undo
mkdir ~/.vim/undo
# add swp dir to avoid swp file clutter
mkdir -p ~/.vim/swp

# node & npm
apt-get install -y nodejs
apt-get install -y npm
# /node & npm

# rg (ripgrep)
mkdir -p ~/ripgrep
cd ~/ripgrep
curl -LO https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep_11.0.2_amd64.deb
sudo dpkg -i ~/ripgrep/ripgrep_11.0.2_amd64.deb
popd

# watchman
apt-get install -y libssl-dev autoconf automake libtool pkg-config
cd ~
git clone https://github.com/facebook/watchman.git
cd watchman
git checkout v4.9.0
./autogen.sh
./configure
make
sudo make install
# /watchman

# java jdk
apt-get install -y default-jdk
# /java jdk

# aws cli
apt-get install -y python-pip
# next add export PATH=~/.local/bin:$PATH to .zshrc
pip install awscli --upgrade --user
# /aws cli

# better clipboard
apt-get install -y xsel
# /better clipboard

# haskell
apt-get install g++ gcc libc6-dev libffi-dev libgmp-dev make xz-utils zlib1g-dev git gnupg

# stow (for dotfiles symlinking)
apt-get install stow

# go
curl -O https://storage.googleapis.com/golang/go1.11.5.linux-amd64.tar.gz
tar -xvf go1.11.5.linux-amd64.tar.gz
rm go1.11.5.linux-amd64.tar.gz
mv go /usr/local/go
chown -R root:root /usr/local/go
# $GOPATH/src is where all projects should live
mkdir $GOPATH
mkdir -p $GOPATH $GOPATH/src $GOPATH/pkg $GOPATH/bin

# protobuf
curl -OL https://github.com/google/protobuf/releases/download/v3.7.1/protoc-3.7.1-linux-x86_64.zip
unzip protoc-*-linux-x86_64.zip -d protoc3
# Move protoc to /usr/local/bin/
sudo mv protoc3/bin/* /usr/local/bin/
# Move protoc3/include to /usr/local/include/
sudo mv protoc3/include/* /usr/local/include/
# Optional: change owner
sudo chown paul /usr/local/bin/protoc
sudo chown -R paul /usr/local/include/google
go get -u google.golang.org/grpc
go get -u github.com/golang/protobuf/protoc-gen-go

# yarn (for coc.nvim)
curl -o- -L https://yarnpkg.com/install.sh | bash

# language servers for vim
npm install -g typescript typescript-language-server
go get -u github.com/sourcegraph/go-langserver

# fzf and pe
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
~/.fzf/install
go get github.com/edi9999/path-extractor/path-extractor

# postgresql
apt install postgresql
# start postgres
# sudo service postgresql start
# connect to postgres
# sudo -i -u postgres

# anki
# First download anki from https://apps.ankiweb.net/
tar xjf ~/Downloads/anki-2.1.11-amd64.tar.bz2
cd ~/Downloads/anki-2.1.11-linux-amd64
make install
popd

# /Installed packages

stow tmux
stow vim
stow zsh

# git config
git config --global branch.autosetupmerge always

# bluetooth
wget https://memcpy.io/files/2017-10-28/BCM-0a5c-6410.hcd
sudo cp BCM-0a5c-6410.hcd /lib/firmware/brcm/
sudo chmod 0644 /lib/firmware/brcm/BCM-0a5c-6410.hcd

# react native
npm install -g create-react-native-app expo-cli
# during dev turn off firewall
# ufw disable
# after dev turn firewall back on
# ufw enable

# # redis
# wget http://download.redis.io/releases/redis-5.0.5.tar.gz
# tar xzf redis-5.0.5.tar.gz
# cd redis-5.0.5
# make

# # elasticsearch
# wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.0-linux-x86_64.tar.gz
# wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.0-linux-x86_64.tar.gz.sha512
# shasum -a 512 -c elasticsearch-7.3.0-linux-x86_64.tar.gz.sha512
# tar -xzf elasticsearch-7.3.0-linux-x86_64.tar.gz
# # cd elasticsearch-7.3.0/

# # kibana
# wget https://artifacts.elastic.co/downloads/kibana/kibana-7.3.0-linux-x86_64.tar.gz
# shasum -a 512 kibana-7.3.0-linux-x86_64.tar.gz
# tar -xzf kibana-7.3.0-linux-x86_64.tar.gz
# # cd kibana-7.3.0-linux-x86_64/

# docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# confirm we now have a key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo usermod -a -G docker $USER

# docker-compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose

# kubectl
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl

# minikube
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
  && chmod +x minikube
sudo mkdir -p /usr/local/bin/
sudo install minikube /usr/local/bin/
rm minikube
minikube config set vm-driver kvm2
sudo apt-get install libvirt-bin
